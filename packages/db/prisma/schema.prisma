// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String              @id @default(cuid())
  email                      String              @unique
  name                       String
  number                     String              @unique
  password                   String
  phoneAndPasswordRegistered Boolean             @default(true)
  Balance                    Balance[]
  onRampTransaction          OnRampTransaction[]
  sentTransfers              P2PTransaction[]    @relation(name: "FromUserRelation")
  receivedTransfers          P2PTransaction[]    @relation(name: "ToUserRelation")
}

model Merchant {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  auth_type AuthType
}

model Balance {
  id      String        @id @default(cuid())
  amount  Int
  decimal Int
  locked  Boolean       @default(false)
  userId  String
  user    User          @relation(fields: [userId], references: [id])
  version Int
  status  BalanceStatus @default(NEW)
}

model OnRampTransaction {
  id        String                  @id @default(cuid())
  userId    String
  amount    Int
  decimal   Int
  user      User                    @relation(fields: [userId], references: [id])
  provider  Providers
  token     String                  @unique
  startTime DateTime
  status    OnRampTransactionStatus
}

model BankToken {
  id            String   @id @default(cuid())
  token         String   @unique
  timeGenerated DateTime
  userId        String
  isUsed        Boolean  @default(false)
  amount        Int
}

model P2PTransaction {
  id         String               @id @default(cuid())
  amount     Int
  decimal    Int
  startTime  DateTime
  fromUserId String
  fromUser   User                 @relation(name: "FromUserRelation", fields: [fromUserId], references: [id])
  toUserId   String
  toUser     User                 @relation(name: "ToUserRelation", fields: [toUserId], references: [id])
  status     P2PTransactionStatus
}

enum OnRampTransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  ON_HOLD
  UNDER_REVIEW
  REVERSED
  AUTHORIZED
  EXPIRED
}

enum P2PTransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum Providers {
  HDFC
  CHASE
  BANK_OF_AMERICA
  ICICI
  GOLDMAN_SACHS
}

enum AuthType {
  Google
  Github
}

enum BalanceStatus {
  NEW
  LOCKED_FOR_TRANSACTION
  COMPLETED_FOR_TRANSACTION
}
